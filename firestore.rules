rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isVerified() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isAuthenticated() 
        && request.resource.data.id == request.auth.uid
        && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId)
        && request.resource.data.id == request.auth.uid
        && request.resource.data.email == resource.data.email; // Email can't be changed
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if isVerified() && resource.data.userId == request.auth.uid;
      allow create: if isVerified() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.status == 'pending';
      allow update: if isVerified()
        && resource.data.userId == request.auth.uid
        && request.resource.data.userId == request.auth.uid
        && (
          // Only allow cancellation if order is pending
          (resource.data.status == 'pending' && request.resource.data.status == 'cancelled') ||
          // Admin operations would be handled through Cloud Functions
          false
        );
    }

    // Products collection
    match /products/{productId} {
      // Anyone can read products
      allow read: if true;
      // Only admin can modify (would be handled through Admin SDK)
      allow write: if false;
    }

    // Points collection (for reward points)
    match /points/{pointId} {
      allow read: if isVerified() && resource.data.userId == request.auth.uid;
      // Points modifications should be handled through Cloud Functions
      allow write: if false;
    }

    // Delivery schedules collection
    match /schedules/{scheduleId} {
      allow read: if isVerified() && resource.data.userId == request.auth.uid;
      allow create: if isVerified() 
        && request.resource.data.userId == request.auth.uid;
      allow update: if isVerified()
        && resource.data.userId == request.auth.uid
        && request.resource.data.userId == request.auth.uid
        // Only allow updates 24 hours before scheduled time
        && (resource.data.scheduledTime - request.time.toMillis()) > (24 * 60 * 60 * 1000);
      allow delete: if isVerified()
        && resource.data.userId == request.auth.uid
        // Only allow cancellation 24 hours before scheduled time
        && (resource.data.scheduledTime - request.time.toMillis()) > (24 * 60 * 60 * 1000);
    }
  }
}